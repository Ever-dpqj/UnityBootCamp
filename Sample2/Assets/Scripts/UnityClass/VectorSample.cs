using UnityEngine;

public class VectorSample : MonoBehaviour
{
    public Vector3 A = new Vector3(); // 0, 0, 0
    public Vector3 B = new Vector3(3, 4); // 3, 4, 0
    public Vector3 C = new Vector3(5, 6, 7); // 5, 6, 7
    public Vector3 D;
    public Vector3 E;


    #region 필기
    // 벡터 요소
    // x, y, z, w
    // w : 셰이더나 수학 계산 등에서 사용되는 Vector4에서의 w축

    // 값(value) vs 참조(reference)
    // 값 : 변수에 데이터가 직접 저장
    // 참조 : 변수에 데이터가 저장된 메모리 주소값이 저장

    // 메모리 저장 영역 / 프로그램 실행 개념
    // 프로그램이 실행되기 위해 os가 정보를 메모리에 로드 해야 함
    // 실행되는 동안 CPU가 코드를 처리하기 위해 메모리가 명령어&데이터를 저장하고 잇어야함

    // 컴퓨터 메모리는 바이트단위로 번호가 새겨진 선형공간을 의미
    // 낮은 주소부터 높은 주소까지 저장되는 영역이 다르다
    // 낮은 주소 : 시작부분
    // / 높은 주소 : 끝부분

    // 대표적인 메모리 공간
    // 1) 코드 : 텍스트영역 / 프로그램 종료까지 남아있는 값
    // 2) 데이터 : 전역변수, 정적변수가 저장되는 영역
    //           (global) (static)
    //           C#에서는 클래스 수준의 정적변수를 사용.
    //                      정적변수(static) : static 키워드가 붙은 변수는 별도의 객체 생성없이 클래스명.변수명으로 직접 접근하는것이 가능
    //                       프로그램 시작시 할당 / 종료까지 유지
    // 3) 힙(heap) : 프로그래머가 직접 할당&해제를 진행하는 영역
    //       ㄴ 참조 타입은 힙에 저장
    //       C#의 힙 영역 데이터는 GC에 의해 자동 관리
    //       따로 신경쓸 필요 x
    //       단 메모리 크고 성능 저하
    // 4) 스택 : 자동으로 사용하는 임시 메모리 영역
    //      함수 호출시 생성되는 변수(지역변수, 매개변수)가 저장되는 영역
    //      함수의 호출이 완료되면 사라지는 데이터, 이때의 호출 정보 == stack frame
    //      매우 빠른 속도로 접근 가능(할당과 해제의 비용이 사실상없음)
    //      먼저 들어온 데이터가 누적되고, 마지막에 들어온 데이터가 먼저 제거(LIFO)






    // 벡터의 특징 
    // - 값 타입(value) 값 그 자체 의미 (구조체 > struct)
    // ㄴ 계산이 빠르다
    // - 벡터에 대한 계산 보조 기능 많이 제공 (magnitude, normalized, Dot, Cross...)
    // - 벡터는 스택영역의 메모리에서 저장이 됩니다.
    #endregion

    void Start()
    {
        D = A + B;
        E = A - C;
    }

    void Update()
    {
        
    }
}
